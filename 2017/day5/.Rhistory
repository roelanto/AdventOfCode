16*230
chosen
seq(from=4, length.out=7)
seq(from=4, length.out=7) % 4
seq(from=4, length.out=7) %% 4
1+(seq(from=4, length.out=7) %% 4))
1+(seq(from=4, length.out=7) %% 4)
1+(seq(from=3, length.out=7) %% 4)
mem
res
res[[1]]
res[[2]]
duplicated(res)
res[[1]]
mem
res
res[[10]] <- NA
res
length(res)
res[[10000]] <- NULL
res
mem
mem
i
duplicated(res)
which(duplicated(res)==TRUE)
which(duplicated(res, fromLast=TRUE)==TRUE)
lines
lines
lines
strsplit(lines, " ")
strsplit(as.character(lines), " ")
strsplit(lines[[1]], " ")
lines
strsplit(as.character(lines[[1]]), " ")
strsplit(as.character(lines[[1,]]), " ")
strsplit(as.character(lines[[1]]), " ")
strsplit(as.character(lines[1,]), " ")
length(strsplit(as.character(lines[1,]), " ")[[]])
length(strsplit(as.character(lines[1,]), " ")[[1]])
?strip
discs
doessupport(discs[5], discs[6])
doessupport(discs[[5]], discs[[6]])
doessupport(discs[[6]], discs[[5]])
oldrandomdisc
disc
disc
randomdisc
hasbalance
discs[[2]]
discs[[2]]@supports
warnings()
i
discs[[1]]
i
discs
discs
95856 - 9
weightofdisc("pidgnp", discs)
weightofdisc("pidgnp", discs)-9
discs
1215-9
k>0
regs[["ad}]
regs[["ad}]

a <- list
s[["ad"]] > 0
a[["ad"]] > 0
a[["ad"]] <- 0
a <- list()
a[["ad"]] <- 0
names(a)
eval
eval("1 > 2")
eval(1 > 2)
?eval
evalq("1 > 2")
eval (1 ">" 2)
eval(expression("1 > 2"))
?expression
eval(as.expression("1>2"))
eval(parse(text="1>2"))
script
script
script
script[1,]
script
script
script[1,]
regs
string
string[2]
string[[1]]
string[1]
length(string)
string
status[1]
status[2]
status
string
string
string
string
score
score
score
score
numgroups
numlevel
numgroups
numgroups
string
string
input
input
length(input)
input
input
score
string
head(input)
)
used
score
score
c("a", "b", "c")[-1]
c("a", "b", "c")[-c(1, 2)]
input
head(input)
strsplit(input, ",")
d <- input
strsplit(d, ",")
class(input)
class(input)
grid
sum(abs(grid))
gridsum(abs(grid))/2
g
apply(g, 2, sum)
apply(g, 1, sum)
g
g
g
g
g[,c(2,3)]
g[,c(2,1)]
g[,c(1,1)]
g[,c(1)]
sums
max(sums)
)
block
rule$pattern
if (c(1,2) == c(1,2))
{ print("a")}
as.character(c("a","b"))
paste(c("a","b")
)
paste(c("a","b"))
t(c("a","b"))
matrix(c(1,2,3,4), nrow=2, byrow=TRUE)
t(matrix(c(1,2,3,4), nrow=2, byrow=TRUE))
matrix(c(1,2,3,4), nrow=2, byrow=TRUE)[,c(2:1)]
as.character(matrix(c(1,2,3,4), nrow=2, byrow=TRUE))
as.character(t(matrix(c(1,2,3,4), nrow=2, byrow=TRUE)))
expand(matrix(c(1,2,3,4), nrow=2, byrow=TRUE))
rule
rule$pattern
as.matrix(strsplit("...#", "")[[1]], nrow=2, byrow=TRUE)
as.matrix(strsplit("...#", "")[[1]], ncol=2, byrow=TRUE)
strsplit("...#", "")[[1]]
rule
all(blockasstring(block))
blockasstring(block)
res
res[[1]]
res[[1]][[1]]
t(res[[1]][[1]])
t(as.data.frame(res[[1]][[1]]))
as.data.frame(res[[1]][[1]])
t(res[[1]][[1]])
res[[1]][[1]]
methods(t)
base::t(res[[1]][[1]])
block
t(block)
rotate(block)
rotate(rotate(block))
rotate(rotate(rotate(block)))
expand(block)
expand(block)
expand(block)
expand(block)
expand(block)
expand(block)
expand(block)
res
unlist(res)
res
    expandedpatterns <- expand(rule$pattern)
    lapply(expandedpatterns, function(pattern) {
        if (all(blockasstring(block) == blockasstring(pattern))) {
            return(rule$expansion)
        }
    })

res
res
str(res)
res[[1]]
res
process(block)
process(block)
block
block[c(1,2),c(1,2)]
process(block)
process(block)
ruletable
rueltable
?read.table
ruletable
str(ruletable)
ruels
rules
nrow(ruletable)
rule[[1]]
rule[[10]]
rules[[10]]
nrow(ruletable)
rules
rules[[106]]
ruletable[1,]
rules
block
block
rules
pblock
pblock
block
process(block)
process(block)
nrow(x)
seq(from=1, to=nrow(block), by=3)
block[c(1:1+(3-1),]
block[c(1:1+(3-1)),]
block[c(1:1+(3-1)),c(1:1+(3-1))]
block[c(1:(1+(3-1))),]
block
pblock
rules
res
sapply(res, is.null)
res[-which(sapply(res, is.null))]
which(sapply(res, is.null))
which(sapply(res, is.null) == TRUE)
res[[-which(sapply(res, is.null))]]
res[[-sapply(res, is.null)]]
res[-sapply(res, is.null)]
res[-sapply(res, !is.null)]
res
res[1]
res[2]
res[[1]]
res[[2]]
res[[which(sapply(res, is.null)==TRUE)]]
sapply(res, is.null)==TRUE
sapply(res, is.null)
which(sapply(res, is.null) == FALSE)
which(sapply(res, is.null) != FALSE)
res[[integer(0)]]
res[[which(sapply(res, is.null) == FALSE)]]
which(sapply(res, is.null) == FALSE)
res
res[[1]]
res[[c(1,2)]]
res[c(1,2)]
res[c(1)]
res
res 
res[[1]]
res[[2]]
res
block
rules
for (rule in rules) {print ("ok")}
pblock
nrow(pblock)
pblock
pblock
pblocks
str(res)
res[[1]]
res[[2]]
res[[4]]
res
unlist(res)
matrix(unlist(res), nrow=nrow(res[[1]]^2), byrow=TRUE)
matrix(unlist(res), nrow=nrow(res[[1]])^2, byrow=TRUE)
matrix(unlist(res), nrow=nrow(res[[1]])^2)
matrix(unlist(t(res)), nrow=nrow(res[[1]])^2)
matrix(unlist(t(res)), nrow=nrow(res[[1]])^2, byrow=TRUE)
res[[1]]
nrow(res[[1]])
nrow(res[[1]])^2
length(unlist(res))
matrix(unlist(t(res)), nrow=nrow(res[[1]])*2, byrow=TRUE)
matrix(unlist(res), nrow=nrow(res[[1]])*2, byrow=TRUE)
matrix(unlist(res), nrow=nrow(res[[1]])*2)
unlist(res)
res
cbind(res[[1]],res[[2]])
pblocks
block
    pblocks <- block

        pblocks <- process(pblocks[[1]])
        pblocks <- process(pblocks)
pblocks
        pblocks <- process(pblocks)

pblocks
    pblocks <- block

        pblocks <- process(pblocks)

pblocks
        res <- lapply(pblocks, applyrules, rules)

res
        pblocks <- glue(res)

        pblocks <- glue(res)

        pblocks <- glue(res)

pblocks
        pblocks <- glue(res)

pblocks
        pblocks <- process(pblocks)

pblocks
        res <- lapply(pblocks, applyrules, rules)

        pblocks <- glue(res)

pblocks
block
    pblocks <- block

        pblocks <- process(pblocks)
        res <- lapply(pblocks, applyrules, rules)
        pblocks <- glue(res)

pblocks
res
length(res)
cbind(res[[c(1:3)]])
cbind(res[c(1:3)])
cbind(res[1],res[2])
cbind(res[[1]],res[[2]])
str(res)
pblocks
pblocks
res
pblocks
pblocks
res
applyrules(pblocks[[1]], rules)
pblocks
pblocks[[1]]
applyrules(pblocks[[1]], rules)
applyrules(pblocks[[1]], rules)
pblocks[[1]]
pblocks
pblocks
pblocks
rules
head(rules)
pblocks
res
pblocks
pblocks
applyrules(pblock[[2]], rules)
applyrules(pblocks[[2]], rules)
applyrules(pblocks[[2]], rules)
applyrules(pblocks[[2]], rules[c(1:3)])
applyrules(pblocks[[2]], rules[c(1:3)])
applyrules(pblocks[[2]], rules[c(1:3)])
l
which(sapply(l, is.null) == TRUE)
l[-which(sapply(l, is.null) == TRUE)]
l
which(sapply(l, is.null) == FALSE)
Q
applyrules(pblocks[[2]], rules[c(1:3)])
c
Q
applyrules(pblocks[[2]], rules[c(1:3)])
pblocks
pblocks
res
length(res)
length(res)
res
length(res)
res
three
three[3]
three[[3]]
cbind(matrix(), m1)
cbind(NULL, m1)
l
s
rows
row
s
rows
Q
size
rows
rows[[2]]
rows[[3]]
s
s
s
s
s
row
s
s
s
s
s
s
n
n
n
n
n
n
u
Q
c
Q
n
n
n
n
n
n
n
n
n
n
n
n
n
row
rows[[row]]
rows
rows
size(rows)
length(rows)
Q
n
length(rows)
rows
n
length(rows)
n
n
n
length(rows)
n
length(rows)
n
length(rows)
n
length(rows)
row
n
length(rows)
Q
cbind(NA, m1)
c
Q
m9
as.chacracter(pblocks)
as.character(pblocks)
sum(as.character(pblocks)=="#")
