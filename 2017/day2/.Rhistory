is.numeric(type.convert("10", as.is=TRUE))
all
2+-1
all[1]
all[[1]]
install.packages("Brobdingnag")
library("Brobdingnag")
2147483647
2147483647 * 2
pwd
pwd()
cwd()
getwd()
chwd
cwd
changewd
setwd
exit
quit
setwd("AdventOfCode/day18")
lines
fun
regs
messages1
all
messages1
messages2
message1
messages1
messages2
regs
regs
?pop
sendbuffer
Q
regs
regs
recv
regs[["sendbuffer"]]
regs[["recvbuffer"]]
last.0
regs.0
last.0
last.1
regs.1
regs.1
regs.1
regs.1$recvbuffer
regs.1$recvbuffer
regs.1[["recvbuffer"]] <- c("abc")
regs.1
regs.0[["sendbuffer"]]
regs.1
last.1
regs.1
regs.1
regs.1
regs1[["recvbuffer"]]
regs.1[["recvbuffer"]]
lengh(regs.1[["recvbuffer"]])
length(regs.1[["recvbuffer"]])
regs.1[["recvbuffer"]]
regs.1[["recvbuffer"]][1]
regs.1[["recvbuffer"]][1] <- NULL
regs.1[["recvbuffer"]][1]
regs.1[["recvbuffer"]]
regs.1[["recvbuffer"]][-1]
regs.1[["recvbuffer"]]
regs.1
allfuncs.0
last.0
length(all)
regs.1
regs.0
last.0
last.1
last.0
regs.1
regs.0
last.1
last.
last.1
last.0
last.0
regs.0$sendbuffer
warnings()
regs.0
regs.0
regs.0
regs0
regs.0
regs.0 
regs.1
regs.1$sendbuffer
regs.0$sendbuffer
regs.0
regs.1
regs.1
regs.0
regs.0
regs.1
regs.0$sendbuffer
regs.0
regs.1
dim(plan)
}
plan[2,2]
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
runif(n=1, min=1, max=4)
runif(n=1, min=1, max=4)
runif(n=1, min=1, max=4)
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
changedirection("EAST")
    str <- "     |              |  +--+        A  |  C     F---|----E|--+      |  |  |  D      +B-+  +--+ "

matrix(str, nrow=6, byrow=TRUE)
matrix(str, nrow=6, byrow=TRUE)[1,1]
matrix(as.character(str), nrow=6, byrow=TRUE)
matrix(as.character(str), nrow=6, byrow=TRUE)
as.character(str)
str
as.vector(str)
vector(str)
as.vector(str)
length(as.vector(str))
length(str)
str
"
readplan <- function(filename) {
    str <- "     |              |  +--+        A  |  C     F---|----E|--+      |  |  |  D      +B-+  +--+ "


"

str <- readplan("AAA")
str
length(str)
 length("abc")
as.vector("ABC")
as.character("ABC")
?character
deparse("ABC")
?strsplit
strsplit(str, NA)
strsplit(str, NA)[1]
strsplit(str, c())
plan
 plan[1,]
 plan[1,2]
    matrix(strsplit(str, c()), nrow=6, byrow=TRUE)

str
strplit(str, c())
strsplit(str, c())
strsplit(str, c())[[1]]
14*6
plan
plan[1,6]
plan[1,4]
plan
strsplit(str, c())[[1]]
str
strsplit(str, c())
strsplit(str, c())[[1]][6]
plan[1,6]
plan
plan
plan
LETTERS
scan("~/AdventOfCode/day19/inputsample.txt")
scan("~/AdventOfCode/day19/inputsample.txt", what=" ")
scan("~/AdventOfCode/day19/inputsample.txt", what="")
scan("~/AdventOfCode/day19/inputsample.txt", what="a")
?scan
scan("~/AdventOfCode/day19/inputsample.txt", what='a')
con=file("~/AdventOfCode/day19/inputsample.txt", open="r")
read(con)
readChar(con)
readChar(con, nchars=-1)
readChar(con, nchars=1024)
plan
dim(plan)
starpos
startpos
    con=file(filename, open="r")
    str <- readChar(con, nchars=1024*1000)
    close(con)

filename="~/AdventOfCode/day19/input.txt"
    con=file(filename, open="r")
    str <- readChar(con, nchars=1024*1000)
    close(con)

str
which(str == '\n')
which(str == "\n")
which(strsplit(str, c())[[1]] == "\n")
length(which(strsplit(str, c())[[1]] == "\n"))
seq[4]
scan("1234")
as.numeric(str)
?as.numeric
data
data
length(data)
length(data)/2
)
length(data)
2110 / 2
apply(m, 2, max)
apply(m, 1, max)
apply(m, 1, max, na.rm=TRUE)
apply(m, 1, max, na.rm=TRUE) - apply(m, 1, min, na.rm=TRUE)
apply(m, 1, max, na.rm=TRUE) - apply(m, 1, min, na.rm=TRUE)
sum(apply(m, 1, max, na.rm=TRUE) - apply(m, 1, min, na.rm=TRUE))
getwd()
 setwd("../day2")
read.table("input.txt")
16312 - 16394
pos
nextpos
tail(seq1)
tail(seq2)
seq1
seq2
seq3
seq4
seq3
seqs
3 %in% seqs
c(seqs)
unlist(seqs)
3 %in% unlist(seqs)
seqs
as.data.frame(spiral)
spiral
val<- 11
seq
midpoints
midpoints
pathlength
pathlength
shortestdistance
range
which(unlist(sapply(seqs,function(x) {val %in% x})) == TRUE)
unlist(sapply(seqs,function(x) {val %in% x}))
pathlength
midpoints(seq[[2]], 2)
midpoints(seq[[2]], 3)
midpoints(spiral[[2]], 3)
midpoints(spiral[[2]], 3)
spiral
midpoints(spiral[[2]], 3)
spiral[[2]]
midpoints(spiral[[2]], 2)
midpoints(spiral[[3]], 3)
midpoints
spiral[[2]]
spiral[[3]]
length(spiral[[3]])
length(spiral[[2]])
8/2/2
seq(from=1, to=8, length.out=4)
seq(from=2, to=8, length.out=3)
seq[seq(from=2, to=8, length.out=3)]
seq[[2]][seq(from=2, to=8, length.out=3)]
spiral[[2]][seq(from=2, to=8, length.out=3)]
length(spiral[[2]])
c(1:9)
c(1:8)
seq(from=c(1:8), length.out=4)
seq(from=1, to=8, length.out=4)
8/4
seq(from=1, to=8, by-2)
seq(from=1, to=8, by=2)
seq[seq(from=1, to=8, by=2)]
spiral[[2]][seq(from=1, to=8, by=2)]
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 3)
midpoints(spiral[[3]], 3)
midpoints(spiral[[3]], 3)
midpoints(spiral[[3]], 2)
midpoints(spiral[[2]], 2)
val <- 12
    seq <- seqs[sapply(seqs,function(x) {val %in% x})][[1]]

seq
midpoints
seq[midpoints]
left(spiral,2)
left(spiral,3)
lstnum <- 3
midpoint.r
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
left(spiral, 2)
spiral[[2]]
length(spiral[[2]])
length(spiral[[2]])/4
midpoints(spiral[[2]], 2)
midpoints(spiral[[2]], 2)
midpoints(spiral[[3]], 3)
spiral[[3]][midpoints(spiral[[3]], 3)]
spiral
rm(seqs)
spiral[[17]]
spiral[[17+1]]
spiral[[17+1]][17]
spiral[[17]][17]
spiral[[2]][2]
spiral[[2]][2-1]
spiral[[3]][3-1]
left(spiral, 2)
left(spiral, 2)
left(spiral, 3)
left(spiral, 4)
left(spiral, 4)
left(spiral, 4)
dim(m)
dim(m)[1]
dim(m)[1]/2
nb(2,2)
nb
m
m
m
m
nb(2,3)
sapply(nb(pos[1],pos[2]), function(x) {
        if (x[1] > 0 && x[1] < dim(m)[1]) {
            if (x[2] > 0 && x[2] < dim(m)[2]) {
                return(m[x[1],x[2]])
            }
        }
        return (0)})
pos
m
dim(m)[1]
midpoints(spiral[[2]], 2)
 spiral[[2]]
spiral[[3]]
spiral[[1]]
p
p[[1]]
p[[2]]
sapply(c(1:3), function(x) {c(1,x)})
p
m
p
positions
m
m
m
m
m
}
steps
createsteps(3)
createsteps(3)
createsteps(5)
createsteps(5)
createsteps(6)
createsteps(6)
createsteps(6)
createsteps(3)
createsteps(3)
createsteps(5)
createsteps(7)
11 %in% m
m
m
read.table("~/AdventOfCode/day20/inputsample.txt")
lies
lines
strsplit("p=<3,0,0>,", "<>")
strsplit("p=<3,0,0>,", "<")
lines
line[1]
line[2]
points
nrow(lines)
lines[1,]
lines[2,]
points
points 
point
point@v
point@a
point@v[[1]]
point@v[[1]] + point@a[[1]]
point
points
points
points
points
distance(points[[1]])
distance(points[[1]])
distance(points[[2]])
c(1,2) == c(1,2)
c(1,2) == c(2,1)
unique(c(0,1,2))
unique(c(0,1,2,2))
unique(c(0,1,2,2,2))
duplicated(c(0,1,2,2,2))
duplicated(c(0,1,2,2,2), fromLast=TRUE)
lapply(points, function(x) {x@coords})
duplicated(lapply(points, function(x) {x@coords}))
points
points
points[c(TRUE, TRUE, TRUE, TRUE)]
points[c(TRUE, TRUE, TRUE, FALSE)]
points
points
c(1,0,2) == c(1,0)
points
distorder
length(distorder)
 install.packages("material3d")
?material3d
library(rgl)
v
persp3d(x, y, z, col="gray", alpha=0.5)
points3d(1,1,2,col="red")
?persp3d
?plot3d
points
length(points)
minx
minx
maxx
minz
library(animation)
?plot3d
?open3d
?snapshot3D
?snapshot3d
?movie3d
?par3d
?rgl.postscript
    xcoords <- unlist(lapply(points, function(x) {x@coords[1]}))

xcoords
warnings()
?rgl.pop
while ((iter < 10) && (length(prevdistorder) != length(distorder)) || sum(prevdistorder == distorder) != length(distorder)) {
    prevdistorder <- distorder
                                        #    message(paste(distorder, " "))
    for (i in c(1:10)) {
        points <- lapply(points, update)
        points <- points[determineduplicated(points)]
        clear3d()
        plotpoints(points)
        rgl.postscript(paste0("file", iter), fmt="pdf")
        rgl.pop()
        distances <- sapply(points, distance)
        distorder <- order(distances)
        iter <- iter+1
    }
}
while ((iter < 10) && (length(prevdistorder) != length(distorder)) || sum(prevdistorder == distorder) != length(distorder)) {
    prevdistorder <- distorder
                                        #    message(paste(distorder, " "))
    for (i in c(1:10)) {
        points <- lapply(points, update)
        points <- points[determineduplicated(points)]
        clear3d()
        plotpoints(points)
        rgl.postscript(paste0("file", iter), fmt="pdf")
        rgl.pop()
        distances <- sapply(points, distance)
        distorder <- order(distances)
        iter <- iter+1
    }
}
duplicates
dupliacte
duplicate
lines
liens
lines
lines[[1]]
lines
digest('anc')
?digest
library(digest)
digest('anc')
strsplit("abcd", "")
instructions
as.vector(instructions)
as.vector(instructions[,1])
instructions
  rm(ls())
ls()
as.character(ls)
ls[[1]]
ls()
rm(as.vector(ls()))
rm(list=ls())
