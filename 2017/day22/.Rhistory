av <- vector(length=1e7)
length(av)
pos <- 1
attr(pos, "class") <- "mine"
attr(pos, "x") <- 2
av[340] <- pos
av
which (attr(av, "x") == 1)
which (attr(av, "x") == 2)
attr(av[340])
av[340]
attributes(av[340])
class(av)
?vector
av
av[[1]]
which(av == class("Pos"))
2^16
2^32
2^32 < 1e7
2^32 > 1e7
 df <- data.frame(x=vector(length=1e6), y=vector(length=1e6), status=vector(length=1e6))
nrow(df)
df[df$x == 1,]
length(df[df$x == 1,])
nrow(df[df$x == 1,])
unique(df$x)
df[1,] <- c(5,4,1)
df[1,]
nrow(df[df$x == 5])
nrow(df[df$x == 5,])
 df$x
unique(df$x)
is.null(df$x)
 df <- data.frame(x=rep(NULL, times=1e6), y=vector(length=1e6), status=vector(length=1e6))
 df <- data.frame(x=rep(NULL, 1e6), y=vector(length=1e6), status=vector(length=1e6))
rep(NULL, 4)
df$x <- NULL
df[1,] <- c(5,4,1)
rep(NA, 4)
 df <- data.frame(x=rep(NA, 1e6), y=vector(length=1e6), status=vector(length=1e6))
df$x
which(!is.na(df$x)(
)
)
which(!is.na(df$x))
df[1,] <- c(5,4,1)
which(!is.na(df$x))
?which
status
head(status)
debug(setinfected)
n
s
n
n
rows
x[1]
x[2]
statusdf[statusdf$x == x[1],]
1 == NA
1 == 2
Q
is.null(0l)
is.null(NULL)
is.null(0)
is.null(0L)
s
n
status <- setinfected(c(5,4), status)
s
n
status <- setinfected(c(5,4), status)
s
n
status
head(status)
cont
undebug(setinfected)
is.na(statusdf$x)[1]
is.na(statusdf$x)
res
head(status)
head(status)
lookup(c(5,4), status)
lookupstatus(c(5,4), status)
res
directionsmp
directions
res
debug(simulate)
n
n
n
n
n
head(status)
s
n
head(status)
head(res$status)
n
n
n
n
n
n
n
n
n
n
n
status
head(status)
n
head(res$status)
Q
debug(simulate)
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
statusdf
Q
Q
undebug(simulate)
head(statusdf)
 head(status)
which(statusdf$x == 5)
which((status$x == 5 & status$y == 5) == TRUE)
status[which((status$x == 5 & status$y == 5) == TRUE),]
status[which((status$x == 5 & status$y == 5) == TRUE)] <- c(1,2,3)
status[which((status$x == 5 & status$y == 5) == TRUE),] <- c(1,2,3)
head(status)
res
b
head(status)
statusdf <- status
head(statusdf)
    rows <- statusdf[!is.na(statusdf$x) & statusdf$x == x[1] & statusdf$y == x[2]]

rows
nrow(rows)
which(is.na(statusdf$x) == TRUE)[1]
head(statusdf)
setstatus(c(1,2), 3)
statusdf[1] <- c(1,2,3)
statusdf[1,1] <- 1
?data.table
setstatus(c(2,3), statusdf, 5)
setstatus(c(2,3), statusdf, 5)
class(NA)
class(1)
class(as.numeric(NA))
status
head(statusdf)
head(status)
status[x==5 & y==4]
status[1]
status[1]$status
head(statusdf[,x] == 1)
which(statusdf[,x] == 1)
which(statusdf[,x] == 1 & statusdf[,y] == 2)
length(which(statusdf[,x] == 1 & statusdf[,y] == 2))
 head(statusdf)
x
which(is.na(statusdf[,x]))[1]
?set
?truelength
head(statusdf)
setstatus(c(1,2), statusdf, 3)
head(statusdf)
res
res
head(status)
head(status)
head(status)
debug(lookupstatus)
x
n
head(statusdf)
rows
x[1]
x[2]
head(statusdf$x)
statusdf$x == x[1]
head(statusdf$x == x[1])
head(statusdf$x == x[1] & statusdf$y == x[2])
statusdf[c(FALSE, FALSE, TRUE)]
statusdf[statusdf$x == x[1] & statusdf$y == x[2]]
head(statusdf)
statusdf[statusdf$x == x[1] && statusdf$y == x[2]]
statusdf[statusdf[,x] == x[1] && statusdf[,y] == x[2]]
statusdf[statusdf[,x] == x[1] & statusdf[,y] == x[2]]
x[1]
x[2]
statusdf[,x] == x[1] & statusdf[,y] == x[2]
head(statusdf[,x] == x[1] & statusdf[,y] == x[2])
statusdf[,x==x[1] & y == x[2]]
head(statusdf[,x==x[1] & y == x[2]])
head(statusdf[,x==x[1] & y == 7])
head(statusdf[,x==5 & y == 5])
head(statusdf[statusdf[,x==5 & y == 5]])
Q
statusdf[statusdf[,x==5 & y == 9]]
length(statusdf[statusdf[,x==5 & y == 9]])
nrow(statusdf[statusdf[,x==5 & y == 9]])
rows <- statusdf[statusdf[,x==5 & y == 9]]
rows
nrow(rows)
nrow(rows) == 0
debug(lookupstatus)
lookupstatus(c(5,5), statusdf)
n
n
rows
nrow(rows)
pos[1]
pos[2]
head(rows)
lookupstatus
statusdf[,x==5 & y==5]
head(statusdf[,x==5 & y==5])
statusdf[statusdf[,x==5 & y==5]]
statusdf[statusdf[,x==5 & y == 9]]
head(statusdf[statusdf[,x==5 & y == 5]])
statusdf
head(status)
rows
Q
lookupstatus(c(5,5), status)
debug(lookupstatus)
lookupstatus(c(5,5), status)
n
head(statusdf)
head(statusdf[,x==5])
head(statusdf[x==5])
head(statusdf[x==5 & y==5])
Q
lookupstatus(c(5,5), status)
res
head(status)
status[x==5 & y==4]
status[1.x==5 & y==4]
status[1,x==5 & y==4]
status[x==5 & y==4, .N]
?set
?set
status[x==5 & y==4, .SD]
status[x==5 & y==4, .SD] <- c(5,4,8)
status[x==5 & y==4, .SD]$status
status[x==5 & y==4, .SD]$status <- 5
key(status)
setkey(status, x, y)
status[.(5,4)]
status[.(5,9)]
status[.(5,999)]
status[.(5,9993638)]
status[.(5,-100)]
status[.(5,-100), status := 10]
status[.(5,-100)]
status[.(5,-100), .N]
status[.(5,-9028), .N]
status[x==5 & y==-9028, .N]
status[.(5,-9028), .N, nomatch=0L]
status[.(5,-9028), .N, nomatch=1L]
status[.(5,-9028), .N, nomatch=NA]
status[.(5,-9028), .N, nomatch=0L]
tail(status)
status[9999]
status[, is.na]
status[, ,is.na]
which(status[, ,is.na] == TRUE)
which(status[, ,is.na] == TRUE)[1]
status[999877]
which(status[, x,is.na] == TRUE)[1]
status(.(5,5))
status[.(5,5)]
status[.(5,5), status := 9]
status[.(5,5)]
res
head(statusdf)
head(status)
status[(.5, 5)]
status[.(5, 5)]
status[.(5, 5), status]
status[.(5, 999), status]
res
debug(setinfected)
key(status)
key(status)
n
s
n
key(statusdf)
n
cont
undebug(setinfected)
key(status)
key(status)
debug(setstatus)
n
key(statusdf)
n
n
key(statusdf)
n
key(statusdf)
n
key(statusdf)
n
key(statusdf)
Q
undebug(setstatus)
1e7 / 10000
1e3
1e4
1e7 / 1000
1e7 %% 1000
1e7 / 1000
1e7 / 10000
1000 / 1e7
10000 / 1e7
1e7 / 10000
9.27 * 10000
?setkey
head(status)
status[,.(5, 6)]
setkey(status, NULL)
status[,.(5, 6)]
key(status)
set(status, 1, 1L, 9)
head(statusdf)
head(status)
set(status, 1, 2L, 9)
set(status, 1, 3L, 9)
status[,.(5, 6)]
status[,.(5, 6), .N]
status[,.(5, 6), .N, nomatch=0L]
status[.(9,9), status]
status[.(9,9), 3L]
status[.(9,9), 3L, on=3L]
status[.(9,9), 3L, on=c("status")]
status[.(9,9), .N]
status[.(9,9), .N, on=c("x", "y")]
res
res
res
head(status)
head(status)
setstatus(c(5,4), status, 9)
head(status)
status[.(5,4), status:=9]
status[.(5,4), status:=9, on=c("status")]
head(status)
status[.(5,4), status:=9, on=c("x", "y", "status")]
setkey(status, x, y)
status[.(5,4), status:=9]
head(status)
status[.(5,4),]
setstatus(c(5,5), status, 9)
status[.(5,5),]
status[.(5,5), status:=9]
status[.(5,5),]
setkey(status, NULL)
status[.(5,5), status:=8]
status[.(5,5), status:=8, on=c("x", "y")]
status[.(5,5),]
status[.(5,5), on=c("x", "y")]
head(status)
setstatus(c(5,4), status, 8)
head(status)
head(status)
res
    lines <- read.delim(file="~/AdventOfCode/day22/input.txt", stringsAsFactors=FALSE, sep="Q", header=FALSE)

lines
    lines <- read.delim(file="~/AdventOfCode/day22/input.txt", stringsAsFactors=FALSE, sep="Q", header=FALSE)

grid
ncol(grid)
head(status)
lines
head(status)
is.na(status)[1]
sum(is.na(status))
sum(!is.na(status))
status
head(status)
status[,x]
!is.na(status[,x])
sum(!is.na(status[,x]))
Sys.time()
Sys.time() + 20
1e5
1e5-1
head(status)
setkey(status, "status")
status <- status[!4]
head(status)
setkey(status, x, y)
status[.(5,4)]
setkey(status, status)
status <- status[!4]
setkey(status, x, y)
status[.(5,4)]
status[!4]
status[!"4"]
setkey(status, status)
status[!"4"]
status[!4]
status[!3]
status[!1]
status[1]
status[4]
setkey(status, x)
status[4]
status[.(4)]
setkey(status, status)
status[!.(4)]
is.na(status[,status])
sum(is.na(status[,status]))
status <- status[!.(4)]
sum(is.na(status[,status]))
head(status)
head(status[,status])
unique(status[,status])
status[.(5,5)]
status[.(5,4)]
head(status)
setkey(status, status)
head(status)
status <- status[!.(4)]
unique(status[,y])
sum(!is.na(status[,x]))
for (fun in all) {
    regs <- lapply(list(fun), function(f) f(regs))[[1]]
}
for (fun in all) {
    regs <- lapply(list(fun), function(f) f(regs))[[1]]
}
regs <- list(a=0, b=0, c=0, d=0, e=0, i=0, p=0, f=0, g=0, h=0, snd=0, rcv=0)
for (fun in all) {
    regs <- lapply(list(fun), function(f) f(regs))[[1]]
}
memory.limit
ls()
options()
options(expressions=20000)
for (fun in all) {
    regs <- lapply(list(fun), function(f) f(regs))[[1]]
}
for (fun in all) {
    regs <- lapply(list(fun), function(f) f(regs))[[1]]
}
all <- list(
    function(regs) {
        message(" set b 79 ")
        regs[["b"]] <- 79 
        regs
    }
  , function(regs) {
      message(" set c b ")
      regs[["c"]] <- regs[["b"]] 
      regs
  })
all
next <- 1
nxt <- 1
all[[1]]
lapply(list(all[[1]]), function(f) f(regs)) 
for (i in c(1:10)) {
    nxt <- 1
    lapply(list(all[[nxt]]), function(f) f(regs))
}
for (i in c(1:10)) {
    nxt <- 1
    regs <- lapply(list(all[[nxt]]), function(f) f(regs))
}
regs
for (i in c(1:10)) {
    nxt <- 1
    regs <- lapply(list(all[[nxt]]), function(f) f(regs))[[1]]
}
}
regs
for (i in c(1:10)) {
    regs <- lapply(list(all[[nxt]]), function(f) f(regs))[[1]]
}
for (i in c(1:10)) {
    regs <- lapply(list(all[[regs$nxt]]), function(f) f(regs))[[1]]
}
write(fun, file)
source(file)
while (regs$nxt <= 32) {
    regs <- lapply(list(all[[regs$nxt]]), function(f) f(regs))[[1]]
    message(regs)
}
print(regs)
message(regs)
 paste(regs)
lines <- read.table("input.txt", sep="Q")
recursive
recursive


library(primes)
install.packages(primes)
install.packages("primes")
library(primes)
generate_primes(from=107900, to=124900)
generate_primes(107900, 124900)
length(generate_primes(107900, 124900))
124900-107900
prime(1)
is.prime(1)
is_prime(seq(from=107900, to=124900, by=17))
sum(!is_prime(seq(from=107900, to=124900, by=17)))
124900-107900
1 %% 3
%% 3
2 %% 3
3 %% 4
2 %% 4
2 %% 5
